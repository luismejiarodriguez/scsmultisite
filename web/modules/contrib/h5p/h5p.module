<?php
/**
 * @file
 * H5P hooks that allows content to be submitted and viewed on the site.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\h5p\H5PDrupal\H5PDrupal;

/**
 * Add dynamic library definitions.
 *
 * The static libraries from H5P Core are added here, so they don't have to
 * be duplicated on every platform.
 *
 * @return array[]
 *   An array of library definitions to register, keyed by library ID. The
 *   library ID will be prefixed with the module name automatically.
 *
 * @see hook_library_info_build()
 */
function h5p_library_info_build() {
  if ($cached = \Drupal::cache()->get(__FUNCTION__)) {
    return $cached->data;
  }
  $database = \Drupal::database();
  /**
   * @var \Drupal\h5p\AssetFileStorage $asset_manager
   */
  $asset_manager = \Drupal::service('h5p.asset_file_manager');
  $asset_manager->mirrorAssets();
  $libraries = [];

  // Register jQuery version that H5P depends on.
  $libraries['h5p.jquery'] = [
    'version' => '1.9.1',
    'license' => [
      'name' => 'MIT',
      'url' => 'https://jquery.org/license/',
      'gpl-compatible' => TRUE,
    ],
  ];
  $h5p_jquery_js_key = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/js/jquery.js', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $libraries['h5p.jquery']['js'][$h5p_jquery_js_key] = [
    'minified' => TRUE,
    'preprocess' => FALSE,
  ];

  // Register script for converting drupalSetting to H5PIntegration.
  $libraries['h5p.integration'] = [
    'version' => '2.0',
    'license' => [
      'name' => 'MIT',
      'url' => 'https://h5p.org',
      'gpl-compatible' => TRUE,
    ],
    'js' => [
      'js/h5p-integration.js' => [],
    ],
    'dependencies' => [
      'core/drupal',
    ],
  ];

  // Content libraries metadata.
  $libraries['h5p.content'] = [
    'version' => '1.0',
    'license' => [
      'name' => 'GPL 3.0',
      'url' => 'https://github.com/h5p/h5p-php-library/blob/master/LICENSE.txt',
      'gpl-compatible' => TRUE,
    ],
    'dependencies' => [
      'core/drupalSettings',
      'h5p/h5p.integration',
      'h5p/h5p.jquery',
    ],
  ];

  // Register core JS needed when viewing H5P content.
  foreach (\H5PCore::$scripts as $script) {
    if ($script === 'js/jquery.js') {
      continue;
    }
    $js = \Drupal::service('file_url_generator')->generate("assets://h5p/h5p-core/{$script}", [
      'absolute' => TRUE,
      'language' => FALSE,
    ])->toString(TRUE)->getGeneratedUrl();
    $libraries['h5p.content']['js'][$js] = [];
  }

  // Register core CSS needed when viewing H5P content.
  foreach (H5PCore::$styles as $style) {
    $css = \Drupal::service('file_url_generator')->generate("assets://h5p/h5p-core/{$style}", [
      'absolute' => TRUE,
      'language' => FALSE,
    ])->toString(TRUE)->getGeneratedUrl();
    $libraries['h5p.content']['css']['base'][$css] = [];
  }

  // Register H5P content dependent on jQuery.
  $libraries['h5p.admin'] = [
    'version' => '1.0',
    'license' => [
      'name' => 'MIT',
      'url' => 'https://h5p.org',
      'gpl-compatible' => TRUE,
    ],
    'dependencies' => [
      'h5p/h5p.integration',
      'h5p/h5p.jquery',
    ],
  ];
  // Admin css.
  $h5p_admin_css_base = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/styles/h5p.css', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $h5p_admin_css_admin_base = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/styles/h5p-admin.css', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $libraries['h5p.admin']['css']['base'][$h5p_admin_css_base] = [];
  $libraries['h5p.admin']['css']['base'][$h5p_admin_css_admin_base] = [];
  // Admin js.
  $h5p_admin_js_utils_base = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/js/h5p-utils.js', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $libraries['h5p.admin']['js']['js/h5p-admin-integration.js'] = [];
  $libraries['h5p.admin']['js'][$h5p_admin_js_utils_base] = [];

  // Register core JS needed when administrating H5P libraries.
  $libraries['h5p.admin.library.list'] = [
    'version' => '1.0',
    'license' => [
      'name' => 'MIT',
      'url' => 'https://h5p.org',
      'gpl-compatible' => TRUE,
    ],
    'dependencies' => [
      'h5p/h5p.admin',
    ],
  ];
  $h5p_admin_library_list_js_key = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/js/h5p-library-list.js', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $libraries['h5p.admin.library.list']['js'][$h5p_admin_library_list_js_key] = [];

  $libraries['h5p.admin.library.upgrade'] = [
    'version' => '1.0',
    'license' => [
      'name' => 'MIT',
      'gpl-compatible' => TRUE,
      'url' => 'https://h5p.org',
    ],
    'dependencies' => [
      'h5p/h5p.admin',
    ],
  ];
  $h5p_admin_library_upgrade_version_js_key = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/js/h5p-version.js', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $h5p_admin_library_upgrade_content_upgrade_js_key = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/js/h5p-content-upgrade.js', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $libraries['h5p.admin.library.upgrade']['js'][$h5p_admin_library_upgrade_version_js_key] = [];
  $libraries['h5p.admin.library.upgrade']['js'][$h5p_admin_library_upgrade_content_upgrade_js_key] = [];

  $libraries['h5p.admin.library.details'] = [
    'dependencies' => [
      'h5p/h5p.admin',
    ],
  ];
  $h5p_admin_library_details_js_key = \Drupal::service('file_url_generator')->generate('assets://h5p/h5p-core/js/h5p-library-details.js', [
    'absolute' => TRUE,
    'language' => FALSE,
  ])->toString(TRUE)->getGeneratedUrl();
  $libraries['h5p.admin.library.details']['js'][$h5p_admin_library_details_js_key] = [];

  // Load installed libraries
  $h5p_libraries = $database->query("
    SELECT
      library_id AS id,
      machine_name AS name,
      major_version AS major,
      minor_version AS minor,
      preloaded_js AS js_csv,
      preloaded_css AS css_csv,
      drop_library_css
    FROM {h5p_libraries}");

  $libraries_prefix = '/' . H5PDrupal::getRelativeH5PPath() . '/libraries';
  foreach ($h5p_libraries as $h5p_library) {

    $js = [];
    $scripts = explode(',', $h5p_library->js_csv);
    foreach ($scripts as &$script) {
      $script = trim($script);
      if ($script) {
        $js["$libraries_prefix/{$h5p_library->name}-{$h5p_library->major}.{$h5p_library->minor}/$script"] = [];
      }
    }

    $css = [];
    $styles = explode(',', $h5p_library->css_csv);
    foreach ($styles as &$style) {
      $style = trim($style);
      if ($style) {
        $css["$libraries_prefix/{$h5p_library->name}-{$h5p_library->major}.{$h5p_library->minor}/$style"] = [];
      }
    }

    // Load dependencies
    $h5p_dependencies = $database->query(
        "SELECT hl.machine_name AS name,
                hl.major_version AS major,
                hl.minor_version AS minor
           FROM {h5p_libraries_libraries} hll
           JOIN {h5p_libraries} hl ON hll.required_library_id = hl.library_id
          WHERE hll.library_id = :library_id
            AND dependency_type = 'preloaded'",
      [':library_id' => $h5p_library->id]);

    $dependencies = ['h5p/h5p.content'];
    foreach ($h5p_dependencies as $h5p_dependency) {
      $dependencies[] = 'h5p/' . _h5p_library_machine_to_id($h5p_dependency);
    }

    $libraries[_h5p_library_machine_to_id($h5p_library)] = [
      'js' => $js,
      'css' => [
        'base' => $css,
      ],
      'dependencies' => $dependencies,
    ];
  }

  \Drupal::cache()->set(__FUNCTION__, $libraries);

  return $libraries;
}

/**
 * Convert library machine name into index key/id for hook_library_info_build().
 *
 * @param array|stdClass $h5p_library
 * @return string Unique library with version
 */
function _h5p_library_machine_to_id($h5p_library) {
  if (is_array($h5p_library)) {
    $h5p_library = (object) [
      'name' => $h5p_library['machineName'],
      'major' => $h5p_library['majorVersion'],
      'minor' => $h5p_library['minorVersion'],
    ];
  }

  $name = strtolower($h5p_library->name);
  if (substr($name, 0, 4) !== 'h5p.') {
    $name = "h5p.{$name}";
  }
  $name = "{$name}-{$h5p_library->major}.{$h5p_library->minor}";
  return $name;
}

/**
 * Implements hook_cron().
 *
 * @see hook_cron()
 */
function h5p_cron() {
  $interface = H5PDrupal::getInstance();

  // Fetch updates
  $interface->fetchLibrariesMetadata();

  // Clean up H5P log table
  $interface->removeOldLogEvents();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @see hook_ENTITY_TYPE_delete()
 */
function h5p_user_delete(EntityInterface $entity) {
  $database = \Drupal::database();

  $database->delete('h5p_points')
    ->condition('uid', $entity->id())
    ->execute();

  // Remove content user data
  $database->delete('h5p_content_user_data')
    ->condition('user_id', $entity->id())
    ->execute();
}

/**
 * Helper function for adding display options to form
 * TODO: Move to some sort of form helper class? Not generally needed in the h5p.module
 *
 * @method _h5p_add_display_option
 * @param  Array      $element               Reference to form element
 * @param  String     $name                  Name of form element
 * @param  String     $title
 * @param  String     $value
 * @param  [type]     $visibility_subject_id A jquery selector. If this is set,
 *                    these DOM elements will be hidden when this this checkbox
 *                    is unchecked
 */
function _h5p_add_display_option(&$element, $name, $title, $value, $visibility_subject_id = null) {
  $element[$name] = array(
    '#type' => 'checkbox',
    '#title' => $title,
    '#default_value' => $value,
  );

  if ($visibility_subject_id !== null) {
    $classes = array('h5p-visibility-toggler');
    $element[$name]['#attributes'] = array(
      'class' => $classes,
      'data-h5p-visibility-subject-selector' => $visibility_subject_id,
    );
  }
}
