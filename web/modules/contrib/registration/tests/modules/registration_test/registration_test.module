<?php

/**
 * @file
 * Provides hooks for registration tests.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\registration\Entity\RegistrationInterface;
use Drupal\registration\HostEntityInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function registration_test_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];
  // Add a base registration field to node entities.
  if ($entity_type->id() === 'node') {
    // Default to enabled with capacity 5 and max of 2 spaces per registration.
    $default_settings = [
      'status' => [
        'value' => TRUE,
      ],
      'capacity' => [
        0 => [
          'value' => 5,
        ],
      ],
      'maximum_spaces' => [
        0 => [
          'value' => 2,
        ],
      ],
      'from_address' => [
        0 => [
          'value' => 'test@example.com',
        ],
      ],
    ];
    $fields['event_registration'] = BaseFieldDefinition::create('registration')
      ->setLabel(t('Registration'))
      ->setDefaultValue([
        'registration_settings' => serialize($default_settings),
      ]);
  }
  return $fields;
}

/**
 * Implements hook_registration_presave().
 */
function registration_test_registration_presave(RegistrationInterface $registration) {
  if ($registration->getAnonymousEmail() == 'trigger_presave_hook@example.org') {
    $registration->set('state', 'complete');
  }
}

/**
 * Implements hook_registration_host__access().
 */
function registration_test_registration_host__access(HostEntityInterface $host_entity, $operation, AccountInterface $account) {
  if ($operation === 'manage') {
    \Drupal::state()->set("registration_test_host_access_manage_hook_fired", TRUE);
    if (\Drupal::state()->get("registration_test_host_access_manage_result") === 'allowed') {
      return AccessResult::allowed();
    }
    elseif (\Drupal::state()->get("registration_test_host_access_manage_result") === 'forbidden') {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}
