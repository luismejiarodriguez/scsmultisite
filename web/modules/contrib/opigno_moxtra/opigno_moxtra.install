<?php

/**
 * @file
 * Install, update and uninstall functions for the Opigno Moxtra module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Config\FileStorage;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install().
 */
function opigno_moxtra_install($is_syncing) {
  // Creates the collaborative workspace field in a training groups.
  if ($is_syncing) {
    return;
  }

  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_moxtra') . '/config/install';
  $storage = new FileStorage($config_path);

  $data = $storage->read('field.storage.group.field_workspace');
  if (!FieldStorageConfig::loadByName($data['entity_type'], $data['field_name'])) {
    FieldStorageConfig::create($data)->save();
  }

  $data = $storage->read('field.field.group.learning_path.field_workspace');
  if (!FieldConfig::loadByName($data['entity_type'], $data['bundle'], $data['field_name'])) {
    FieldConfig::create($data)->save();
  }

  _opigno_moxtra_set_meeting_permissions();
}

/**
 * Set meeting permissions.
 */
function _opigno_moxtra_set_meeting_permissions() {
  // Allow content managers to start meeting.
  $role = Role::load('content_manager');
  if ($role instanceof RoleInterface) {
    $role->grantPermission('start meeting');
    $role->save();
  }

  // Allow live meeting managers to start meeting.
  $role = Role::load('collaborative_features');
  if ($role instanceof RoleInterface) {
    $role->grantPermission('start meeting');
    $role->grantPermission('score meeting');
    $role->save();
  }

  // Allow users to view ILT entities.
  $role = Role::load(RoleInterface::AUTHENTICATED_ID);
  if ($role instanceof RoleInterface) {
    $role->grantPermission('view meeting entities');
    $role->save();
  }

  // Allow platform-level user managers to score LM entities.
  $role = Role::load('user_manager');
  if ($role instanceof RoleInterface) {
    $role->grantPermission('score meeting');
    $role->save();
  }
}

/**
 * Implements hook_uninstall().
 */
function opigno_moxtra_uninstall() {
  // Remove module configs.
  $configs = [
    'core.entity_form_display.opigno_calendar_event.meeting_calendar_event.default',
    'core.entity_form_display.opigno_calendar_event.meeting_calendar_event.embedded_widget',
    'core.entity_view_display.opigno_calendar_event.meeting_calendar_event.default',
    'core.entity_view_display.opigno_calendar_event.meeting_calendar_event.embedded_display',
    'field.field.group.learning_path.field_workspace',
    'field.field.opigno_calendar_event.meeting_calendar_event.field_calendar_event_members',
    'field.field.opigno_calendar_event.meeting_calendar_event.field_meeting',
    'field.storage.group.field_workspace',
    'field.storage.opigno_calendar_event.field_meeting',
    'group.content_type.group_content_type_78b202c274a0f',
    'opigno_calendar_event.type.meeting_calendar_event',
    'opigno_moxtra.settings',
    'user.role.collaborative_features',
  ];
  foreach ($configs as $config) {
    try {
      \Drupal::configFactory()->getEditable($config)->delete();
    }
    catch (Exception $e) {
      \Drupal::logger('opigno_moxtra')->error($e->getMessage());
    }
  }
}

/**
 * Implements hook_update_last_removed().
 */
function opigno_moxtra_update_last_removed() {
  return 9004;
}
