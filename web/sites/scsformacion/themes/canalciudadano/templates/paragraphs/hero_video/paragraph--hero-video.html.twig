{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set herov_text_link_color = content.hv_ctext_hvlink.0|render %}
{% set herov_link_color = content.hv_color_link.0|render %}

<style>
  #herovideo-{{ paragraph.id() }} a.glightbox.btn-watch-video.d-flex.align-items-center {
    margin-left: 25px;
  }

  #herovideo-{{ paragraph.id() }} h2, #herovideo-{{ paragraph.id() }} p.st-hi {
  {% if herov_text_link_color is not empty %}  color: {{ herov_text_link_color }}; {% endif %}
  }


  {% if herov_link_color is not empty %}
  #herovideo-{{ paragraph.id() }}  .btn-get-started {
    background: {{ herov_link_color }}!important;
  }
  #herovideo-{{ paragraph.id() }} .btn-watch-video i {
    color: {{ content.hv_color_link.0 }}!important;
    font-size: 32px;
    transition: 0.3s;
    line-height: 0;
    margin-right: 8px;
  }
  #herovideo-{{ paragraph.id() }} .bi-play-circle::before {
    content: "\f4f3";
  }
  #herovideo-{{ paragraph.id() }} .bi::before, [class^="bi-"]::before, [class*=" bi-"]::before {
    display: inline-block;
    font-family: 'bootstrap-icons';
    font-style: normal;
    font-weight: normal !important;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    vertical-align: -.125em;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  {% endif %}

  #herovideo-{{ paragraph.id() }} a.btn-get-started {
    font-weight: 400;
    font-size: 15px;
    letter-spacing: 1px;
    display: inline-block;
    padding: 10px 30px;
    border-radius: 4px;
    transition: 0.3s;
    text-decoration: none;
  }

  #herovideo-{{ paragraph.id() }}  a.btn-get-started { color: #fff; }

  #herovideo-{{ paragraph.id() }} .hero {
    margin-bottom: 20px;
  }

  #herovideo-{{ paragraph.id() }} a.btn-get-started:hover {
    background: red;
  }
</style>

{%
  set classes = [
  'paragraph',
  'row',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
]
%}

{{ attach_library('canalciudadano/paragraphs.hero_video') }}

{% block paragraph %}
<!-- Hero Section -->
<section id="herovideo-{{ paragraph.id() }}" class="herovideo section">

<div{{ attributes.addClass(classes) }}>
    {% block content %}
    {%- if content.hv_bg_image|render is not empty -%}
    <div class="d-flex min-vh-100 card-cover bg-dark hero-video-wrapper" lc-helper="background"
         style="background:url({{ file_url(content.hv_bg_image[0]['#media'].field_media_image.entity.uri.value|image_style('diapositiva_1200x650')) }}) center / cover no-repeat;background-blend-mode: overlay; ">
      {%- endif -%}
      <div class="hvwrapper">
        <div class="container hv">
          <div class="row hv">
            <div class="col-lg-6">
              <h2 data-aos="fade-up" data-aos-delay="100" class="mt-hi">{{ content.hv_main_title.0 }}</h2>
              <p data-aos="fade-up" data-aos-delay="200" class="st-hi">{{ content.hv_secundary_text.0 }}</p>
              {% if content.hv_link|render is not empty %}
                <div class="d-flex mt-4 aos-init aos-animate" data-aos="fade-up" data-aos-delay="300">
                  <a href="{{ content.hv_link[0]['#url'] }}" class="btn-get-started mailtoui">{{ content.hv_link[0]['#title'] }}</a>
                  <a href="{{ content.hv_url_video.0 }}"
                     class="glightbox btn-watch-video d-flex align-items-center"><i class="bi bi-play-circle"></i><span>{{ content.hv_watch_video_text.0 }}</span></a>
                </div>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
      </div>

    {% endblock %}
  </div>
</section><!-- /Hero Section -->
{% endblock paragraph %}
